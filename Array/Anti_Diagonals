vector<vector<int> > Solution::diagonal(vector<vector<int> > &A) 
{
    int n = A.size();
    vector<vector<int> >res(2*n-1);
    int row = 0, col = 0;
    for(int i = 0; i<n; i++)
    {
        int r  = row, c = col;
        while(r <= i)
        {
            res[i].push_back( A[r][c] );
            r++;
            c--;
        }
        col++;
    }
    row = 1, col = n-1;
    for(int j = n; j<2*n-1; j++)
    {
        int r  = row, c = col;
        while(r <= n-1)
        {
            res[j].push_back( A[r][c] );
            r++;
            c--;
        }
        row++;
    }
    return res;
}




______________________________________________________________________________________
Another Approach
______________________________________________________________________________________





vector<vector<int> > Solution::diagonal(vector<vector<int> > &A) 
{
    int n = A.size();
    int N = 2*(n-1) + 1;//number of vectors in ans
    vector<vector<int>> ans(N);
    for(int i = 0;i<n;i++)
    {
        for(int j = 0;j<n;j++)
            ans[i+j].push_back(A[i][j]);//sum of index values in 2d array gives the index in ans
    }
    return ans;
}
