___________________________________________________________________
Approach 1:   swap to its same position
___________________________________________________________________

class Solution 
{
    public:
        int firstMissingPositive(vector<int> &A) 
        {
            int n = A.size();
            for (int i = 0; i < n; i++) 
            {
                if (A[i] > 0 && A[i] <= n) 
                {
                    int pos = A[i] - 1;
                    if (A[pos] != A[i]) 
                    {
                        swap(A[pos], A[i]);
                        i--;
                    }
                }
            }
            for (int i = 0; i < n; i++) 
            {
                if (A[i] != i + 1) return (i + 1);
            }
            return n + 1;
        }
};




_____________________________________________________________________
Approach 2:
_____________________________________________________________________

int Solution::firstMissingPositive(vector<int> &A) 
{
    int m = 0;
    for(int i=0; i<A.size(); i++)
    {
        m = max( m, A[i] );
    }
    int temp[m+2] = {0};
    for(int i=0; i<A.size(); i++)
    {
        temp[A[i]]++;
    }
    for( int i=1; i<=m; i++)
    {
        if(!temp[i])
            return i;
    }
    return m+1;
}
