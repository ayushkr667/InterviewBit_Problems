_______________________________________________________________________________________
APPROACH 1:
_______________________________________________________________________________________

void Solution::merge(vector<int> &A, vector<int> &B)
{
    
    // O(1) space
    // If all elements of B are placed in array
    // then elements of A are already in place
    
    int i = A.size() - 1; // i pointing to last index of A
    int j = B.size() - 1; // j pointing to last index of B
    
    int lastPos = A.size() + B.size() - 1; // lastPos pointing to last index of merged array A and B
    
    A.resize(A.size() + B.size());
    
    while(j >= 0)
    {
        if(i >= 0 and A[i] > B[j])
            A[lastPos--] = A[i--];
        else
            A[lastPos--] = B[j--];
    }
    
}

________________________________________________________________________________________
APPROACH 2:
________________________________________________________________________________________

void Solution::merge(vector<int> &A, vector<int> &B) 
{
    vector<int> res;
    int i=0, j=0;
    while( i< A.size() && j < B.size() )
    {
        if( A[i] < B[j] )
        {
            res.push_back(A[i]);
            i++;
        }
        else
        {
            res.push_back(B[j]);
            j++;
        }
    }
    while( i< A.size() )
    {
        res.push_back(A[i]);
        i++;
    }
    while( j< B.size() )
    {
        res.push_back(B[j]);
        j++;
    }
    A.clear();
    for( int i=0; i<res.size(); i++)
        A.push_back( res[i] );
}
