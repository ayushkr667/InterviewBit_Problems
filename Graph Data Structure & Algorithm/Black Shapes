int dx[] = {1, -1, 0, 0};
int dy[] = {0, 0, 1, -1};
vector< vector<bool> >vis; 
int n, m;

bool isValid(int x, int y, vector<string> A){
    if( x < n && x >=0 && y >=0 && y < m && A[x][y] == 'X' && !vis[x][y])
        return true;
        
    return false;
}

void dfs( int x, int y , vector<string> A){
    vis[x][y] = true;
    
    for(int i=0; i<4; i++ ){
        int x_new = x + dx[i];
        int y_new = y + dy[i];
        if( isValid(x_new, y_new, A) ){
            dfs(x_new, y_new, A);
        }
    }
}

int Solution::black(vector<string> &A) {
    n = A.size();
    m = A[0].size();
    vis.assign(n, vector<bool>());
    
    for(int i=0; i<n; i++){
        vis[i].assign(m, false);
    }
    
    int count = 0;
    
    for(int i=0; i<n; i++){
        for(int j=0; j<m; j++){
            if( !vis[i][j] && A[i][j] == 'X'){
                count++;
                
                //each dfs will give 1 shape..
                dfs( i, j, A );
            }
        }
    }
    
    return count;
}
