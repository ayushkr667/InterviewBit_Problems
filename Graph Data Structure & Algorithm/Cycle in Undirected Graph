vector<vector<int>> adj; //adjacency matrix

int cycle(int v, vector<bool>&vis){
    vis[v] = true;
    stack<pair<int, int>> s;
    s.push({v, -1});
    
    //dfs
    while( !s.empty() ){
        pair<int, int> temp = s.top();
        int f = temp.first;
        int parent = temp.second;
        s.pop();
        for( auto i = adj[f].begin(); i!= adj[f].end(); i++){
            if( !vis[*i] ){
                s.push( {*i, f} );
                vis[*i] = true;
            }
            
            //if visted and not parent
            else{
                if ( *i != parent ){
                    return 1;
                }
            }
        }
    }
    return 0;
}



int Solution::solve(int A, vector<vector<int> > &B) {
    adj.assign(A+1, vector<int>());
    
    vector<bool> vis;
    vis.assign(A+1, false);
    
    
    //create adjacency matrix
    for( int i = 0; i < B.size(); i++ ){
        adj[ B[i][0] ].push_back( B[i][1] );
        adj[ B[i][1] ].push_back( B[i][0] );
    }
    
    
    //dfs from each not visited node
    for(int i=1; i<=A; i++){
        if( !vis[i] ){
            if( cycle(i, vis) )
                return 1;
        }
    }
    return 0;
}
