int dx[] = {0, 0, 1, -1, 1, 1, -1, -1};
int dy[] = {1, -1, 0, 0, 1, -1, -1, 1};
vector< vector<bool> > vis;

bool isValid( vector<vector<int>>&A, int x, int y, int n, int m){
    return (x >=0) && (x < n) && (y >= 0) && (y < m) && (!vis[x][y]) && (A[x][y]) ; 
    
}

void call( vector<vector<int>> &A, int x, int y, int n, int m, int& count ){
    vis[x][y] = true;
    
    for(int i=0; i<8; i++){
        if( isValid( A, x+dx[i], y+dy[i], n, m )){
            count++;
            call(A, x+dx[i], y+dy[i], n, m, count);
        }
    }
}

int Solution::solve(vector<vector<int> > &A) {
    int n = A.size();   int m = A[0].size();
    
    vis.assign(n, vector<bool>());
    
    for(int i=0; i<n; i++){
        vis[i].assign(m, false);
    }
    
    int maximum = 0, count = 0;
    for(int i=0; i<n; i++){
        for(int j =0; j<m; j++){
            if( !vis[i][j] && A[i][j] ){
                int count  = 1;
                call( A , i, j, n, m, count );
                maximum = max( maximum, count);
            }
        }
    }
    
    return maximum;
}
