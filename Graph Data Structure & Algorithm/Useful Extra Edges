//we can do this by applying dijkestra on matrix and by adding 1 extra edge at a time then compare.

//or

// Use dijkstra 2 times. Once with C as origin and another
// with D as origin. Now for every node, you have the length of the shortest path from
// C and from D. Now you can just iterate over each road and check if this road
// helps you decreasing the existing distance between C and D.
// whenever you get a better answer, you can update your answer to this
// value and keep iterating on the auxillary roads.


// #define pii pair<int,int>

// int dijkstras(int src, int dest, int n, vector<vector<pii>> &adj){
//     vector<int> dist(n+1, INT_MAX);
//     vector<bool> vis(n+1, false);
//     dist[src]=0;
//     priority_queue<pii, vector<pii>, greater<pii>> minHp;
//     minHp.push({0,src});
    
//     while(!minHp.empty()){
//         pii p=minHp.top();
//         int u=p.second;
//         minHp.pop();
//         if(vis[u]) continue;
//         vis[u]=true;
        
//         for(auto child:adj[u]){
//             int v=child.first;
//             int w=child.second;
//             if(dist[v]>dist[u]+w){
//                 dist[v]=dist[u]+w;
//                 minHp.push({dist[v], v});
//             }
//         }
//     }
//     return dist[dest];
// }

// int Solution::solve(int A, vector<vector<int> > &B, int C, int D, vector<vector<int> > &E) {
//     vector<vector<pii>> adj(A+1);
//     for(auto v:B){
//         adj[v[0]].push_back({v[1], v[2]});
//     }
    
//     int ans=INT_MAX;
//     // take one edge at a time from E
//     for(auto v:E){
//         if(v[0]>A || v[1]>A) continue;
        
//         adj[v[0]].push_back({v[1], v[2]});
//         adj[v[1]].push_back({v[0], v[2]});
//         int temp=dijkstras(C,D,A,adj);
//         ans=min(ans, temp);
//         adj[v[0]].pop_back();
//         adj[v[1]].pop_back();
        
//     }
//     return (ans==INT_MAX) ? -1 : ans;
// }


typedef pair<int,int> ii;
typedef vector<ii> vii;
typedef vector<int> vi;
#define se second
#define fi first
#define pb push_back
int n,m,kk,s,t,pp;

vector<vii> dist;
vector<vii> rdist;

const int INF = 1e9;

vi dists(100002,INF); //distance from source s to node
vi distt(100002,INF); //distance from node to target

void dijkstras(int source, vector<vii> &v,vector<int> &distance){
    priority_queue<ii,vii,greater<ii> > pq;
    pq.push(ii(0,source));
    distance[source]=0;
    while(!pq.empty()){
        ii top = pq.top();
        pq.pop();
        int node = top.se;
        int d = top.fi;
        for(int i=0;i<v[node].size();++i){
            ii neighbor = v[node][i];
            if(distance[neighbor.fi]>d+neighbor.se){
                distance[neighbor.fi]=d+neighbor.se;
                pq.push(ii(distance[neighbor.fi],neighbor.fi));
            }
        }
    }
}
int Solution::solve(int A, vector<vector<int> > &B, int C, int D, vector<vector<int> > &E) {
    dists = vi(100002,INF);
    distt = vi(100002, INF);
    n=A;
    dist = vector<vii> (n+1,vector<ii>());
    rdist = vector<vii> (n+1,vector<ii>());
    for(int i=0;i<B.size();i++)
    {
        dist[B[i][0]].push_back(ii(B[i][1],B[i][2]));
        rdist[B[i][1]].push_back(ii(B[i][0],B[i][2]));
    }
    dijkstras(C,dist,dists);
    dijkstras(D,rdist,distt);
    int ans = dists[D];
    for(int i=0;i<E.size();i++)
    {   int u=E[i][0];
        int v=E[i][1];
        int d=E[i][2];
        ans=min(ans,min(dists[u]+d+distt[v],dists[v]+d+distt[u]));
    }
    if(ans==INF)
        ans=-1;
    return ans;
}
