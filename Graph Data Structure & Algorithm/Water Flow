int dx[]={0,0,1,-1};
int dy[]={1,-1,0,0};
bool isSafe(int i,int j,int n,int m){
    if(i<0 || i>=n || j<0 || j>=m)
    return false;
    return true;
}
int Solution::solve(vector<vector<int>> &A) {
    int n=A.size(),m=A[0].size();
    bool red[n][m],blue[n][m];
    queue<pair<int,int>> q;
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            red[i][j]=false;
            blue[i][j]=false;
        }
    }
    //boundary of red lake
    for(int j=0;j<=m-1;j++){q.push({n-1,j});red[n-1][j]=true;}
    for(int i=0;i<n-1;i++){q.push({i,m-1});red[i][m-1]=true;}
    while(!q.empty()){
        int i = q.front().first,j=q.front().second;
        q.pop();
        red[i][j]=true;
        for(int k=0;k<4;k++){
            int x = i+dx[k],y=j+dy[k];
            if(isSafe(x,y,n,m) && A[x][y] >= A[i][j] && red[x][y]==false){
                q.push({x,y});
                red[x][y]=true;
            }
        }
    }
    //boundary of blue lake
    for(int j=0;j<=m-1;j++){q.push({0,j});blue[0][j]=true;}
    for(int i=1;i<=n-1;i++){q.push({i,0});blue[i][0]=true;}
    while(!q.empty()){
        int i = q.front().first,j=q.front().second;
        q.pop();
        blue[i][j]=true;
        for(int k=0;k<4;k++){
            int x = i+dx[k],y=j+dy[k];
            if(isSafe(x,y,n,m) && A[x][y] >= A[i][j] && blue[x][y]==false){
                q.push({x,y});
                blue[x][y]=true;
            }
        }
    }
    int ans = 0;
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(red[i][j]==true && blue[i][j]==true){
                ans++;
            }
        }
    }
    return ans;
}
