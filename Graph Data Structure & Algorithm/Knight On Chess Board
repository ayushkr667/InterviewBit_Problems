vector<vector<int> >visit;
int dx[] = {-1, -1, 1, 1, -2, -2, 2, 2};
int dy[] = {2, -2, 2, -2, -1, 1, -1, 1};
int n, m;

bool isValid( int x, int y){
    if( x >= 0 && x < n && y >=0 && y < m && visit[x][y] == INT_MAX ){
        return true;
    }
    return false;
}

void bfs(int C, int D ){
    queue< pair<int, int>> q;
    q.push({C, D});
    while( !q.empty() ){
        int x = q.front().first;
        int y = q.front().second;
        q.pop();
        
        for(int i=0; i<8; i++){
            int x_n = x + dx[i];
            int y_n = y + dy[i];
            if( isValid(x_n, y_n) ){
                visit[x_n][y_n] = min( visit[x_n][y_n], visit[x][y] + 1);
                q.push({x_n, y_n});
            }
        }
    }
}

int Solution::knight(int A, int B, int C, int D, int E, int F) {
    visit.assign(A,vector<int> ( B, INT_MAX ));
    //A -- row
    //B -- col  // c, D start // E, F end
    n = A; m = B;   C--; D--;   E--; F--;
    
    visit[C][D] = 0;
    
    //apply bfs on start position
    bfs( C, D );
    
    if( visit[E][F] == INT_MAX ){
        return -1;
    }
    else{
        return visit[E][F];
    }
}
