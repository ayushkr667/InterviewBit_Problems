int par[60001];
int getPar(int x)
{
    int tempx = x;
    while(par[x] != x)
    {
        x = par[x];
    }
    while(tempx != par[tempx])
    {
        int ntempx = par[tempx];
        par[tempx] = x;
        tempx = ntempx;
    }
    
    return x;
}

int Solution::solve(int A, vector<vector<int> > &B) {
    
    vector<pair<int, int>> graph[1001];
    for(int i = 1; i <= A; i++)
    {
        par[i] = i;
    }
    for(int i = 0; i < B.size(); i++)
    {
        graph[B[i][2]].push_back(make_pair(B[i][0], B[i][1]));
    }
    int ans = 0;
    for(int i = 1; i < 1001; i++)
    {
        for(int j = 0; j < graph[i].size(); j++)
        {
            int p1 = getPar(graph[i][j].first);
            int p2 = getPar(graph[i][j].second);
            if(p1 != p2)
            {
                par[p1] = min(p1,p2);
                par[p2] = min(p1,p2);
                
                ans += i;
            }
        }
    }
    return ans;
}
