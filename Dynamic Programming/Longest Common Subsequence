int Solution::solve(string A, string B) {
    int n = A.size(); //row
    int m = B.size(); //col
    int dp[n+1][m+1];
    memset(dp, -1, sizeof(dp) );
    
    //if length of any string is 0
    for(int i=0; i<=n; i++){
        dp[i][0] = 0;
    }
    for(int i=0; i<=m; i++){
        dp[0][i] = 0;
    }
    
    //fill the table
    for(int i=1; i<=n; i++){
        for(int j=1; j<=m; j++){
            if( A[i-1] == B[j-1] ){
                dp[i][j] = dp[i-1][j-1] + 1;
            }
            else{
                dp[i][j] = max( dp[i][j-1], dp[i-1][j]);
            }
        }
    }
    
    //return the max length
    return dp[n][m];
}
