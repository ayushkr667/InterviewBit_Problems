int Solution::solve(string A) {
    string A_rev = string( A.rbegin(), A.rend() );
    
    //now find longest common subsequence in A, and A_rev
    int n = A.size();
    int dp[n+1][n+1];
    
    //initializer
    for(int i = 0; i<= n; i++){
        dp[i][0] = 0;
        dp[0][i] = 0;
    }
    
    //fill the dp table
    for(int i =1; i<=n; i++){
        for(int j = 1; j<=n; j++){
            if( A[i-1] == A_rev[j-1] ){
                dp[i][j] = dp[i-1][j-1] + 1;
            }
            else{
                dp[i][j] = max( dp[i-1][j], dp[i][j-1] );
            }
        }
    }
    
    return dp[n][n];
}
