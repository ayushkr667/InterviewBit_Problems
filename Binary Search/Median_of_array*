double Solution::findMedianSortedArrays(const vector<int> &A, const vector<int> &B) 
{
    int x = A.size(), y = B.size();
    
    if(x > y) return findMedianSortedArrays(B, A);
    
    int low = 0;
    int high = x;
    while (low <= high) 
    {
        int partitionX = (low + high)/2;
        int partitionY = (x + y + 1)/2 - partitionX;

        //if partitionX is 0 it means nothing is there on left side. Use -INF for maxLeftX
        //if partitionX is length of input then there is nothing on right side. 
        //Use +INF for minRightX
        int maxLeftX = (partitionX == 0) ? INT_MIN : A[partitionX - 1];
        int minRightX = (partitionX == x) ? INT_MAX : A[partitionX];

        int maxLeftY = (partitionY == 0) ? INT_MIN : B[partitionY - 1];
        int minRightY = (partitionY == y) ? INT_MAX : B[partitionY];

        if (maxLeftX <= minRightY && maxLeftY <= minRightX) 
        {
            //We have partitioned array at correct place
            // Now get max of left elements and min of right elements 
            //to get the median in case of even length combined array size
            // or get max of left for odd length combined array size.
            if ((x + y) % 2 == 0) 
            {
                return ((double)max(maxLeftX, maxLeftY) + min(minRightX, minRightY))/2;
                
            } 
            else 
            {
                return (double)max(maxLeftX, maxLeftY);
            }
        } 
        else if (maxLeftX > minRightY) 
        { //we are too far on right side for partitionX. Go on left side.
                high = partitionX - 1;
        } 
        else 
        { //we are too far on left side for partitionX. Go on right side.
            low = partitionX + 1;
        }
    }
}
