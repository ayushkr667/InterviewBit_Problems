int Solution::searchMatrix(vector<vector<int> > &A, int B) 
{
    int row = A.size();
    int col = A[0].size();
    
    int l =0, r = row-1;
    //binary search in row
    while( l <= r )
    {
        int  mid = l + ( r - l )/2;
        if( A[mid][0] == B) 
            return 1;
            
        else if( A[mid][0] > B)
            r = mid - 1;
            
        else
            l = mid + 1;
    }
    int x = r;
    
    //IMPORTANT : if B is < A[0][0], then x vecomes -1;
    if( x < 0)
        return 0;
        
    //binary search in colume of row x
    l = 0, r= col-1;
    while( l <= r)
    {
        int mid = l + (r - l)/2;
        if( A[x][mid] == B)
            return 1;
        
        else if( A[x][mid] > B )
            r = mid -1;
        
        else
            l = mid + 1;
    }
    return 0;
}



_____________________________________________________________________________________________
Another Approach
_____________________________________________________________________________________________

int Solution::searchMatrix(vector<vector<int> > &A, int B) 
{
    int N=A.size();
    int M=A[0].size();
    int start=0, end=N*M-1;
    while(start<=end)
    {
        int mid=start+(end-start)/2;
        int x=mid/M;
        int y=mid%M;
        if(A[x][y]==B) return 1;
        if(B<A[x][y]) end=mid-1;
        else start=mid+1;
    }
    return 0;
}
