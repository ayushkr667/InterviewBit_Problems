_______________________________________________________________________________
Approach 1:
_______________________________________________________________________________

int Solution::solve(string A) 
{
    int left = 0;
    int right = A.size()-1;
    int count = 0;
    while(left<right)
    {
        if(A[left]==A[right]){left++;right--;}
        else if(A[left+1]==A[right]){count++;left++;}
        else if(A[left]==A[right-1]){count++;right--;}
        else return 0;
    }
    if(count == 0 and left == right) return 1;
    if(count == 1) return 1;
    return 0;
}



______________________________________________________________________________
Approach 2:
______________________________________________________________________________


int Solution::solve(string A) 
{
    int n = A.size();
    int l = n-1, c =0;
    for( int i=0; i<l; i++)
    {
        //cout<<i<<" "<<l<<" "<<c<<"\n";    
        if( A[i] != A[l] )
        {
            //if both character are adjacent and after excluding 1 char it is not odd
            if( l-i == 1 && (n%2 != 0) )
                return 0;
            
            //decremented from right side    
            if( A[i] == A[l-1] )
            {
                c++;  l--;
            }
            
            //incremented from left side
            else if( A[l] == A[i+1] )
            {
                c++; i++;
            }
            
            else
                return 0;
        }
        
        if( c > 1 )
            return 0;
            
        l--;
    }
    return 1;
}
