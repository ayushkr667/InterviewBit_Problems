___________________________________________________________________________________________________
Approach 1:
___________________________________________________________________________________________________

string Solution::convert(string a, int b) {
    if(b==1)return a;
    vector<string> res(b);
    int i = 0, j = 0 ;
    
    // boolea variable to check if i am moving forward for the lines (res);
    bool forward = true; // initially it is true;
    
    while(i<a.length()){
        res[j] +=  a[i++];
        
        // if moving forward then make it false once we reach the end.
        if(forward) forward = !(j==b-1);
        
        // if moving backward (i.e, forward is false), then make it true once we reach in the front.
        else forward = j==0;
        
        if(forward)j++;
        else j--;
    }
    
    string ans = "";
    for(auto x: res)ans += x; // append strings line by line.
    return ans;
}

_________________________________________________________________________________________________________
Approach 2:
_________________________________________________________________________________________________________

string Solution::convert(string A, int B) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details
    int i = 0;
    int count = 0;
    int flag = 0;
    int num = B-1;
    
    string ans = "";
    
    if(A.size() == 0 || A.size() == 1 || B == 1){
        return A;
    }
    
    while(count < B){
        i = count;
        flag = 0;
        while(i < A.size()){
            if((count == 0) || (count == B-1)){    
                ans = ans + A[i];
                i = i + 2*num;
            }
            else{
                if(flag == 0){
                    ans = ans + A[i];
                    i = i + 2*(B-count-1);
                    flag = 1;
                }
                else{
                    ans = ans + A[i];
                    i = i + 2*count;
                    flag = 0;
                }
            }
        }
        count++;
    }
    
    return ans;
}
