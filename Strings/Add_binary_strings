_____________________________________________________________________
Approach 1:
_____________________________________________________________________


string Solution::addBinary(string a, string b) 
{
    string ans = "";
    int ansLen = 0, carry = 0, sum;
    int i = (int)a.length() - 1, j = (int)b.length() - 1;
    while (i >= 0 || j >= 0 || carry) 
    {
        sum = carry;
        if (i >= 0) sum += (a[i] - '0');
        if (j >= 0) sum += (b[j] - '0');
        ans.push_back((char)('0' + sum % 2));
        carry = sum / 2;
        i--; 
        j--;
    }
    reverse(ans.begin(), ans.end());
    return ans;
}

 
 
 ____________________________________________________________________________
 Approach 2:
 ____________________________________________________________________________
 
 
    
string Solution::addBinary(string A, string B) 
{
    int n = A.size();
    int m = B.size();
    int carry = 0;
    string res = "";
    int i, j;
    for(i = n-1, j = m-1; (i>=0 && j>=0); i--, j--)
    {
        int sum = ( (A[i] -'0') + (B[j] -'0') + carry );
        //cout<<sum<<" ";
        res += ((sum%2) +'0');
        //cout<<res<<"\n";
        carry = sum/2;
    }
    //cout<< res<<" "<<i<<" "<<j<<"\n";
    
    while(i >=0)
    {
        int sum = (A[i] - '0') + carry;
        res+= ((sum%2) +'0');
        carry = sum/2;
        i--;
    }
    while(j >=0)
    {
        int sum = (B[j] - '0') + carry;
        res+= ((sum%2) +'0');
        carry = sum/2;
        j--;
    }
    
    if(carry)
        res+=(carry + '0');
        
    reverse(res.begin(), res.end());
    return res;
}
