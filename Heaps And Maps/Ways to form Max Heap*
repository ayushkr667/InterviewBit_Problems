//we can apply dp to get rid of overlapping call

long long int combination(int n,int r,int mod){
    int C[r+1];
    memset(C, 0, sizeof(C));
 
    C[0] = 1;
    for (int i = 1; i <= n; i++)
    {
        for (int j = min(i, r); j > 0; j--)
            C[j] = (C[j] + C[j-1])%mod;
    }
    return C[r];
}
int Solution::solve(int A) {
    int n=A;
    if(A <=1){
        return 1;
    }
    else{
        int h=log2(n);
        // max number of elements that can be present in the hth level of any heap . 
        //Lets call it m. m = 2h
        int m=pow(2,h);
        
        int p=n+1-m;
        int l;
        if(p>=m/2)
            l=m-1;
        else
            l=m/2-1+p;
        int r=n-1-l;
        long long int x = combination(n-1,l,1000000007);
        long long int y = solve(l);
        long long int z = solve(r);
        return (((x*y) % 1000000007)* z) % 1000000007;     
    }
}
