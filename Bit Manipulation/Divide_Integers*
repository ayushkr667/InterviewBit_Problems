int divid(long long dividend, long long divisor) 
{ 
  int sign = ((dividend < 0) ^ (divisor < 0)) ? -1 : 1; 
  dividend = abs(dividend); 
  divisor = abs(divisor); 
  
  // Initialize the quotient 
  long long quotient = 0, temp = 0; 
  
  // test down from the highest bit and 
  // accumulate the tentative value for 
  // valid bit 
  for (int i = 31; i >= 0; --i) 
  { 
    if (temp + (divisor << i) <= dividend) { 
      temp += divisor << i; 
      quotient |= 1LL << i; 
    } 
  }
  return sign * quotient; 
} 

int Solution::divide(int A, int B) 
{
    if(A==INT_MIN&&B==-1)
        return INT_MAX;
    return divid((long long)A,(long long)B);
}
